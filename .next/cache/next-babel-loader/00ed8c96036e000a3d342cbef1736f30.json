{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nexport default (async (req, res) => {\n  // 1. Destructure the email address from the request body.\n  const {\n    email\n  } = req.body;\n\n  if (!email) {\n    // 2. Throw an error if an email wasn't provided.\n    return res.status(400).json({\n      error: 'Email is required'\n    });\n  }\n\n  try {\n    // 3. Fetch the environment variables.\n    const LIST_ID = process.env.MAILCHIMP_LIST_ID; //5731324a36\n\n    const API_KEY = process.env.MAILCHIMP_API_KEY; // 1af674e6c92ffd26a97110eaa1c72cec-us4\n    // 4. API keys are in the form <key>-us3.\n\n    const DATACENTER = API_KEY.split('-')[1]; // 5. The status of 'subscribed' is equivalent to a double opt-in.\n\n    const data = {\n      email_address: email,\n      status: 'subscribed'\n    }; // 6. Send a POST request to Mailchimp.\n\n    const response = await fetch(`https://${DATACENTER}.api.mailchimp.com/3.0/lists/${LIST_ID}/members`, {\n      body: JSON.stringify(data),\n      headers: {\n        Authorization: `apikey ${API_KEY}`,\n        'Content-Type': 'application/json'\n      },\n      method: 'POST'\n    }); // 7. Swallow any errors from Mailchimp and return a better error message.\n\n    if (response.status >= 400) {\n      return res.status(400).json({\n        error: `There was an error subscribing to the newsletter. Shoot me an email at [demo@demo.io] and I'll add you to the list.`\n      });\n    } // 8. If we made it this far, it was a success! ðŸŽ‰\n\n\n    return res.status(201).json({\n      error: ''\n    });\n  } catch (error) {\n    return res.status(500).json({\n      error: error.message || error.toString()\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"module"}